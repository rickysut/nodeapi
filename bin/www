#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
const express = require('express');
const bodyParser = require('body-parser');
var debug = require('debug')('nodeapi:server');
var http = require('http');
const https = require('https');
const compression = require('compression');
const fs = require('fs');
const cors = require('cors');

require("dotenv").config();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
// console.log(port);
app.use(compression());
app.use(cors());
app.use(requireHTTPS);
app.set('port', port);

// Express body parser
app.use('/public', express.static('public'));
app.use(bodyParser.urlencoded({extended: true}));
app.use(bodyParser.json());


/**
 * Create HTTP server.
 */

// var server = https.createServer(app);
var server = https.createServer({
  key: fs.readFileSync(process.env.SSLKEY),
  cert: fs.readFileSync(process.env.SSLCERT),
}, app)
    .listen(port, function() {
      console.log('App listening on port ' + port + '! Go to https://localhost:' + port + '/');
    });


function requireHTTPS(req, res, next) {
  if (!req.secure) {
    return res.redirect('https://' + req.get('host') + req.url);
  }
  next();
}

app.enable('trust proxy');
app.use(function(req, res, next) {
  if (req.secure) {
    return next();
  }
  res.redirect('https://' + req.headers.host + req.url);
});

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    debug('Listening on ' + bind);
}


